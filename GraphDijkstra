import java.util.*;
import java.lang.*;

public class GraphDijkstra{
    public static final int V=9;  // No. of vertices
    
    // A utility function to print the constructed distance array
    void printSolution(int dist[], int n)
    {
        System.out.println("Vertex   Distance from Source");
        for (int i = 0; i < n; i++)
            System.out.println(i+" \t\t "+dist[i]);
    }

    // Main recursive function to find if the graph has cycle
    
    public int minDist(int [] weight, boolean [] sptSet) {
        
        // Initialize min value
        int min = Integer.MAX_VALUE, min_index=-1;
 
        for (int v = 0; v < V; v++)
            if (sptSet[v] == false && weight[v] <= min)
            {
                min = weight[v];
                min_index = v;
            }
 
        return min_index;
        
    }
    
    public void doDijkstra (int source, int [][]Graph ) {
        

        boolean [] sptSet = new boolean[V];
        int [] weight = new int[V];
        
        for ( int i=0; i<V; i++) {
            sptSet[i] = false;
            weight [i] = Integer.MAX_VALUE;
        }
        
        weight [source] = 0;
        
        
       
        for ( int count =0; count < V-1; count++) {
    
            int u = minDist(weight, sptSet); // u is the node with minm Distance
            
            sptSet[u] = true; //put the source in shortest path set
        
             //update distance of all neighboring node of u
            for ( int i=0; i<V; i ++ ) {
                if ( !sptSet[i] && Graph[u][i] != 0 && 
                weight[u] != Integer.MAX_VALUE &&
                (weight[u]+Graph[u][i] < weight[i])  ) {
                        weight[i] = weight[u]+Graph[u][i];
                }
            
            }
        }
        
        printSolution(weight, V);
        
    }


    // Driver program to test above functions
    public static void main(String[] args) {
       

        System.out.println("Finding cycle");
        
        GraphDijkstra g1 = new GraphDijkstra();
        
        int Graph[][] = new int[][]{{0, 4, 0, 0, 0, 0, 0, 8, 0},
                      {4, 0, 8, 0, 0, 0, 0, 11, 0},
                      {0, 8, 0, 7, 0, 4, 0, 0, 2},
                      {0, 0, 7, 0, 9, 14, 0, 0, 0},
                      {0, 0, 0, 9, 0, 10, 0, 0, 0},
                      {0, 0, 4, 14, 10, 0, 2, 0, 0},
                      {0, 0, 0, 0, 0, 2, 0, 1, 6},
                      {8, 11, 0, 0, 0, 0, 1, 0, 7},
                      {0, 0, 2, 0, 0, 0, 6, 7, 0}
                     };
        g1.doDijkstra(0, Graph);

        
    }
}
